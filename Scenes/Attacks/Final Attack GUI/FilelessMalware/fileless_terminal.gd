extends MarginContainer

@onready var code_edit: CodeEdit = $HSplitContainer/CodeEdit
@onready var overlay: ColorRect = $HSplitContainer/CodeEdit/Overlay
@onready var desktop: MarginContainer = $"../Margin"
@onready var fileless: MarginContainer = $"."
@onready var rich_text_label: RichTextLabel = $HSplitContainer/HFlowContainer/RichTextLabel
@export var animation:AnimationPlayer 

var step: int = 0

func _ready() -> void:
	overlay.visible = false
	animation.play("fileless_start")

func _on_back_button_down() -> void:
	# TODO: Set limits on back and next
	if step >= 1:
		step -= 1
		set_step(step)

func _on_next_button_down() -> void:
	step += 1
	set_step(step)
	
func set_step(step: int) -> void:
	match step:
		#Stsrt or MSFVENOM Start
		1:
			overlay.visible = true
			animation.play("fileless_1")
		2:
			rich_text_label.text = " You didn’t type --platform windows, but because your payload (windows/meterpreter/reverse_tcp) is clearly for Windows, msfvenom guessed and set it to Windows automatically."
			animation.play("fileless_2")
		3:
			rich_text_label.text = "You didn’t type --arch x86, but your chosen payload works on 32-bit (x86) systems, so msfvenom picked that for you."
			animation.play("fileless_3")
		4:
			rich_text_label.text = "Payload created, now let's host it in apache. CLEAR the terminal"
			animation.play("fileless_4")
		#APACHE
		5:
			animation.play("fileless_5")
		6:
			rich_text_label.text = "This line copies the shellcode.txt file (your payload in C array format) into Apache’s public HTML folder."
			animation.play("fileless_6")
		7:
			rich_text_label.text = "This line starts the Apache web server so the file can be served over HTTP."
			animation.play("fileless_7")
		8:
			rich_text_label.text = "Requests the file via HTTP from your Apache server’s IP address. \n\n If it outputs the full unsigned char buf[] = ... shellcode, then the hosting is working."
			animation.play("fileless_8")
		9:
			rich_text_label.text = "Look like it's working"
			animation.play("fileless_9")
		10:
			rich_text_label.text = "Now run CLEAR and let's setup the listener in Metasploit"
			animation.play("fileless_10")
		#METASPLOIT
		11:
			
			rich_text_label.text = "Now let's create the listener in metasploit"
		12:
			animation.play("fileless_11")
			rich_text_label.text = "This module doesn’t exploit anything — it just waits (listens) for a payload to connect back. \n\n Perfect for catching a reverse_tcp payload you made with msfvenom."
		13:
			animation.play("fileless_12")
			rich_text_label.text = "Matches the payload type you generated earlier — this is critical. \n\n If the payload you made in msfvenom is windows/meterpreter/reverse_tcp, this must be the same here."
		14:
			animation.play("fileless_13")
			rich_text_label.text = "This should be the IP address of your attacking machine on the same network as the target. \n\n Must match the LHOST you used in msfvenom."
		15:
			animation.play("fileless_14")
			rich_text_label.text = "Same as above — this needs to match the LPORT from your generated payload."
		16:
			animation.play("fileless_15")
			rich_text_label.text = "Shows all the required settings. \n\n You’ve set LHOST and LPORT, and EXITFUNC has a default (process), so you’re ready to run. \n\n Let's now create the boilerplate \n\n Let's close the terminal and open VSCODE"
		17:
			fileless.visible = false
			desktop.visible = true
